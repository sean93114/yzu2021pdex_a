/**
 *2021/03/08 程式設計上課範例
 *內容：
 *private,protected,public,constructor,destructor,class heritage
 *
 *@author   1052062游釋恩
 *@version  1.1
 *@date     2021/03/12
 */
 
#include <iostream>
#include <string>
using namespace std;

/**
 *產生一台汽車叫CCAR
 *class內都是在描述這台汽車的功能，外型等．．．
 */
class CCAR {
/**
 *private的內容只有這個程式內可存取
 */
private:
string nickname;/**車子的名稱*/
/**
 *protected的內容繼承者也可以用
 */
string nickname;
protected:
int light;/**車子有燈*/
int wheel;/*＊車子有輪子*/
/**
 *public的內容所有範圍皆可存取
 */
public:
/**
 *constructor 建構子：
 *創建一個特殊的function與類別相同名稱，進入記憶體時自動執行
 */
CCAR() :light(2)
{
wheel = 5;/**車子有五個輪子*/
cout << "car's constructor(wheel=" << wheel << ")" << endl;
}
CCAR(string nickname) :light(2)
{
wheel = 5;
this->nickname = nickname;/*前者的nickname為第28行private中宣告的
cout << "car's constructor(nickname=" << nickname << ")" << endl;
}
/**
 *destructor 解構子：
 *創建一個特殊的function與類別相同名稱前面加上~，離開記憶體前自動執行
 */
~CCAR()
{
cout << "car's destructor" << "(" << nickname << ")" << endl;
}
void start()
{
cout << "car's start" << endl;
}
void stop()
{
cout << "car's stop" << endl;
}
void turn()
{
cout << "car's turn" << endl;
}
};
//--------------------------
/**
 *有個類別叫CBMW，他繼承了CCAR的所有功能
 */
class CBMW : public CCAR {
public:
CBMW() { light = 4; wheel = 4; cout << "bmw's constructor" << endl; }
~CBMW() { cout << "bmw's destructor" << endl; }

void Abs()/*!新增功能（寫一個不存在的）->除了繼承CCAR的以外的新功能*/
{
cout << "bmw's abs" << endl;
}
void start()/*!覆蓋舊功能（寫一個一樣的）
{
cout << "bmw's start" << endl;
/**
 *解析運算子->當區域變數（CBMW中的start）覆蓋了全域變數（CCAR中的start）時，使用解析運算子來存取全域變數
 */
CCAR::start();//scope operator

}
};
//--------------------------
int main(int argc, const char * argv[]) {
CBMW bmw;/*!用CBMW宣告一個變數叫bmw，他繼承了CCAR的所有功能*/
/**
 *此行運算邏輯為->尋找class CBMW->尋找繼承來源的CCAR->執行CCAR建構子->執行CBMW建構子
 *印出->car's constructor(wheel=5)->endl->bmw's constructor
 */

// bmw.light=3;
bmw.start();
/**
 *尋找class CBMW中的start，但因為解析運算子所以會執行CCAR的建構子
bmw.Abs();
bmw.stop();

return 0;
}
